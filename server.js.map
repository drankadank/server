{"version":3,"sources":["server.js"],"names":[],"mappings":";;;;;;;;;uBAKoB,SAAS;;;;0BACN,aAAa;;;;wBACf,UAAU;;;;AAC/B,IAAI,GAAG,GAAG,0BAAa,sBAAsB,CAAC,CAAC;;AAE/C,IAAI,GAAG,GAAG,2BAAS,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,wBAAW,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;AAClD,GAAG,CAAC,GAAG,CAAC,wBAAW,IAAI,EAAE,CAAC,CAAA;;AAE1B,GAAG,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAK;AAC1B,KAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAA;AACjD,KAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,wBAAwB,CAAC,CAAA;AACvE,KAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,8CAA8C,CAAC,CAAA;AAC7F,MAAI,EAAE,CAAC;CACR,CAAC,CAAC;;;;;;;AAOP,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACzB,KAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;CACnC,CAAC,CAAC;;AAEH,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC/B,SAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;kBACJ,GAAG,CAAC,IAAI;MAA1B,SAAS,aAAT,SAAS;MAAE,EAAE,aAAF,EAAE;;AACnB,MAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAClC,UAAQ,CAAC,GAAG,CAAC;AACX,aAAS,EAAE,SAAS;AACpB,UAAM,EAAE,EAAE;GACX,EAAE,UAAA,GAAG,EAAI;AACR,QAAI,GAAG,EAAE;AACP,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAClB,MAAM;AACL,aAAO,CAAC,GAAG,sDACE,SAAS,0BACV,EAAE,CAAG,CAAC;KACnB;AACD,OAAG,CAAC,GAAG,EAAE,CAAC;GACX,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC5B,SAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;mBACF,GAAG,CAAC,IAAI;MAA1B,SAAS,cAAT,SAAS;MAAE,EAAE,cAAF,EAAE;;AACnB,MAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAClC,UAAQ,CAAC,MAAM,CAAC;AACd,WAAO,EAAE,SAAS;GACnB,EAAE,UAAA,GAAG,EAAI;AACR,QAAI,GAAG,EAAE;AACP,aAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAClB,MAAM;AACL,aAAO,CAAC,GAAG,sDACI,SAAS,0BACZ,EAAE,CAAG,CAAC;KACnB;AACD,OAAG,CAAC,GAAG,EAAE,CAAC;GACX,CAAC,CAAC;CACJ,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAmBH,IAAI,IAAI,GAAG,IAAI,CAAC;AAChB,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,YAAM;AAClC,SAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,IAAI,CAAC,CAAC;CACzD,CAAC,CAAC","file":"server.js","sourcesContent":["/**\n * ===========\n * = MODULES =\n * ===========\n */\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport Firebase from 'firebase';\nlet ref = new Firebase('drank.firebaseIO.com');\n\nlet app = express();\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n\n    app.use((req, res, next) => {\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE')\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, Authorization')\n      next();\n    });\n\n/**\n * ==========\n * = ROUTES =\n * ==========\n */\napp.get('/', (req, res) => {\n  res.send({ message: 'Aw yiss!' });\n});\n\napp.post('/start', (req, res) => {\n  console.log('pinged start');\n  let { timestamp, id } = req.body;\n  let chugsRef = ref.child('chugs');\n  chugsRef.set({\n    startTime: timestamp,\n    device: id\n  }, err => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(`Success! Received start ping:\n        endTime: ${timestamp}\n        device: ${id}`);\n    }\n    res.end();\n  });\n});\n\napp.put('/end', (req, res) => {\n  console.log('pinged end');\n  let { timestamp, id } = req.body;\n  let chugsRef = ref.child('chugs');\n  chugsRef.update({\n    endTime: timestamp\n  }, err => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(`Success! Received end ping:\n        timestamp: ${timestamp}\n        device: ${id}`);\n    }\n    res.end();\n  });\n});\n\n\n/**\n * ============\n * = DATABASE =\n * ============\n */\n// let { uri, host, port } = config.get('ServerInfo.db')\n// mongoose.connect(uri, (err, database) => {\n//   if (err) console.log(err);\n//   else console.log('(>^_^)> Connected to database. <(^_^<)')\n// })\n\n/**\n * =============\n * = START APP =\n * =============\n */\nlet port = 8000;\nlet server = app.listen(port, () => {\n  console.log('drankadank is listening on port: ' + port);\n});"],"sourceRoot":"/source/"}